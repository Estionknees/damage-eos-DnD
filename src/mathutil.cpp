#include <limits>
#include "mathutil.hpp"

// Signed integer overflow is implementation-dependent, so we can't rely on it
int32_t u32_to_i32(uint32_t x) {
    if (x <= std::numeric_limits<int32_t>::max()) {
        return static_cast<int32_t>(x);
    }
    return static_cast<int32_t>(x - std::numeric_limits<int32_t>::min()) +
           std::numeric_limits<int32_t>::min();
}

// Sign-bit extension is implementation-dependent, so we can't rely on it
uint32_t asr(uint32_t x, uint8_t shift) {
    uint32_t shifted = x >> shift;
    if (x > std::numeric_limits<int32_t>::max()) {
        shifted |= ((static_cast<uint64_t>(1) << shift) - 1) << (32 - shift);
    }
    return shifted;
}

bool Fx32::is_negative() const { return raw > std::numeric_limits<int32_t>::max(); }
int32_t Fx32::trunc() const { return u32_to_i32(asr(raw, 8)); }
// pmdsky-debug: RoundUpDiv256 ([NA] 0x2001894)
int32_t Fx32::ceil() const {
    int32_t n = trunc();
    if (raw & 0xFF) {
        n++;
    }
    return n;
}
double Fx32::val() const {
    return static_cast<double>(trunc()) + static_cast<double>(raw & 0xFF) / (1 << 8);
}

// These operations aren't really true to how the game does it, but should be equivalent.
// For most arithmetic operations, the actual game just operates on the raw 32-bit integers
// directly

Fx32& Fx32::operator+=(const Fx32& rhs) {
    raw += rhs.raw;
    return *this;
}
Fx32 operator+(Fx32 lhs, const Fx32& rhs) {
    lhs += rhs;
    return lhs;
}
// Should match pmdsky-debug: MultiplyByFixedPoint ([NA] 0x2001A54)
Fx32& Fx32::operator*=(const Fx32& rhs) {
    uint32_t lhs_raw = this->is_negative() ? -raw : raw;
    uint32_t rhs_raw = rhs.is_negative() ? -rhs.raw : rhs.raw;
    uint64_t prod_raw64 = static_cast<uint64_t>(lhs_raw) * rhs_raw;
    uint32_t prod_raw = prod_raw64 >> 8;
    if ((prod_raw64 & 0xFF) > std::numeric_limits<int8_t>::max()) {
        prod_raw++;
    }
    raw = (this->is_negative() != rhs.is_negative()) ? -prod_raw : prod_raw;
    return *this;
}
Fx32 operator*(Fx32 lhs, const Fx32& rhs) {
    lhs *= rhs;
    return lhs;
}
Fx32& Fx32::operator/=(const Fx32& rhs) {
    uint32_t lhs_raw = this->is_negative() ? -raw : raw;
    uint32_t rhs_raw = rhs.is_negative() ? -rhs.raw : rhs.raw;
    uint64_t quotient_raw64 = (static_cast<uint64_t>(lhs_raw) << 8) / rhs_raw;
    uint32_t quotient_raw = static_cast<uint32_t>(quotient_raw64);
    raw = (this->is_negative() != rhs.is_negative()) ? -quotient_raw : quotient_raw;
    return *this;
}
Fx32 operator/(Fx32 lhs, const Fx32& rhs) {
    lhs /= rhs;
    return lhs;
}

bool operator<(const Fx32& lhs, const Fx32& rhs) {
    if (lhs.is_negative() && !rhs.is_negative()) {
        return true;
    } else if (!lhs.is_negative() && rhs.is_negative()) {
        return false;
    }
    return lhs.raw < rhs.raw;
}
bool operator>(const Fx32& lhs, const Fx32& rhs) { return rhs < lhs; }

const Fx32 Fx32::CONST_NEG0_5 = Fx32{0xFFFFFF, 0x80};
const Fx32 Fx32::CONST_0_25 = Fx32{0, 0x40};
const Fx32 Fx32::CONST_0_5 = Fx32{0, 0x80};
const Fx32 Fx32::CONST_153_DIV_256 = Fx32{0, 153};
const Fx32 Fx32::CONST_1_DIV_SQRT2 = Fx32{0, 0xB5};
const Fx32 Fx32::CONST_0_75 = Fx32{0, 0xC0};
const Fx32 Fx32::CONST_0_8 = Fx32{0, 0xCC};
const Fx32 Fx32::CONST_1_2 = Fx32{1, 0x33};
const Fx32 Fx32::CONST_1_25 = Fx32{1, 0x40};
const Fx32 Fx32::CONST_85_DIV_64 = Fx32{1, 0x54};
const Fx32 Fx32::CONST_1_4 = Fx32{1, 0x66};
const Fx32 Fx32::CONST_1_5 = Fx32{1, 0x80};
const Fx32 Fx32::CONST_1_7 = Fx32{1, 0xB3};

// These operations aren't really true to how the game does it, but should be equivalent. The
// game's code is significantly more complex because it uses a 32-bit instruction set

// Should match pmdsky-debug: FixedPoint64IsNegative ([NA] 0x2001D50)
bool Fx64::is_negative() const { return raw > std::numeric_limits<int64_t>::max(); }
// Should match pmdsky-debug: FixedPoint64ToInt ([NA] 0x2001CB0)
int32_t Fx64::round() const {
    uint32_t fpart = raw & 0xFFFF;
    uint32_t unsigned_ipart = static_cast<uint32_t>(raw >> 16); // Throw out the upper 16 bits
    if (fpart >= (1 << 15)) {
        unsigned_ipart += 1;
    }
    return u32_to_i32(unsigned_ipart);
}
double Fx64::val() const {
    int64_t ipart = raw >> 16;
    if (is_negative()) {
        ipart -= (static_cast<int64_t>(1) << 48);
    }
    return static_cast<double>(ipart) + static_cast<double>(raw & 0xFFFF) / (1 << 16);
}

// Should match pmdsky-debug: AddFixedPoint64 ([NA] 0x20021C8)
Fx64& Fx64::operator+=(const Fx64& rhs) {
    raw += rhs.raw;
    return *this;
}
Fx64 operator+(Fx64 lhs, const Fx64& rhs) {
    lhs += rhs;
    return lhs;
}
// Should match pmdsky-debug: MultiplyFixedPoint64 ([NA] 0x2001DF4)
Fx64& Fx64::operator*=(const Fx64& rhs) {
    uint64_t lhs_raw = this->is_negative() ? -raw : raw;
    uint64_t rhs_raw = rhs.is_negative() ? -rhs.raw : rhs.raw;

    // Do the unsigned multiplication in chunks to avoid overflowing
    // (lhs_hi * 2^32 + lhs_lo) * (rhs_hi * 2^32 + rhs_lo) ==
    //   (lhs_hi * rhs_hi) * 2^64
    //   + (lhs_hi * rhs_lo + lhs_lo * rhs_hi) * 2^32
    //   + (lhs_lo * rhs_lo)
    uint64_t lhs_hi = lhs_raw >> 32;
    uint64_t lhs_lo = static_cast<uint32_t>(lhs_raw);
    uint64_t rhs_hi = rhs_raw >> 32;
    uint64_t rhs_lo = static_cast<uint32_t>(rhs_raw);
    uint64_t prod_raw_low_bits = ((lhs_hi * rhs_lo + lhs_lo * rhs_hi) << 32) + (lhs_lo * rhs_lo);
    // prod_raw_low_bits has 32+32 integer+fractional, so it might've lost the upper 16 bits in
    // the final representation, so we need to do the calculation again with the rightshift
    // applied implicitly.
    uint64_t prod_raw = ((lhs_hi * rhs_lo + lhs_lo * rhs_hi) << 16) + ((lhs_lo * rhs_lo) >> 16);
    if ((prod_raw_low_bits & 0xFFFF) > std::numeric_limits<int16_t>::max()) {
        prod_raw++;
    }

    raw = (this->is_negative() != rhs.is_negative()) ? -prod_raw : prod_raw;

    return *this;
}
Fx64 operator*(Fx64 lhs, const Fx64& rhs) {
    lhs *= rhs;
    return lhs;
}
// Should match pmdsky-debug: DivideFixedPoint64 ([NA] 0x2001EC8)
Fx64& Fx64::operator/=(const Fx64& rhs) {
    if (rhs == 0) {
        // This is the way it works in-game
        raw = std::numeric_limits<int64_t>::max();
    } else {
        uint64_t lhs_raw = this->is_negative() ? -raw : raw;
        uint64_t rhs_raw = rhs.is_negative() ? -rhs.raw : rhs.raw;

        uint64_t quotient_raw;
        const uint64_t two48 = static_cast<uint64_t>(1) << 48;
        if (lhs_raw < two48) {
            // For small lhs, we can do the leftshift directly
            quotient_raw = (lhs_raw << 16) / rhs_raw;
        } else {
            // Otherwise, do the unsigned division in two parts to avoid overflowing
            // ([l // r] * r + [l % r]) / r == l//r + (l%r)/r
            // Converting this back to fixed-point with 16 bits of precision:
            // (l // r) << 16 + [(l%r) << 16]//r
            quotient_raw = (lhs_raw / rhs_raw) << 16;
            uint64_t remainder = lhs_raw % rhs_raw;
            if (remainder < two48) {
                // if (l%r) < 2^48, we can compute the second term directly
                quotient_raw += (remainder << 16) / rhs_raw;
            } else {
                // if (l%r) >= 2^48, then it can be shown (by Taylor series expansion) that
                //   [(l%r) << 16] / r == (l%r) / (r >> 16) exactly, within 16 bits of precision
                //   (at least I'm pretty sure it's exact...at most off by 1 due to flooring)
                quotient_raw += remainder / (rhs_raw >> 16);
            }
        }

        raw = (this->is_negative() != rhs.is_negative()) ? -quotient_raw : quotient_raw;
    }
    return *this;
}
Fx64 operator/(Fx64 lhs, const Fx64& rhs) {
    lhs /= rhs;
    return lhs;
}

// Should match FixedPoint64CmpLt ([NA] 0x2001D68)
bool operator<(const Fx64& lhs, const Fx64& rhs) {
    if (lhs.is_negative() && !rhs.is_negative()) {
        return true;
    } else if (!lhs.is_negative() && rhs.is_negative()) {
        return false;
    }
    return lhs.raw < rhs.raw;
}
bool operator==(const Fx64& lhs, const Fx64& rhs) { return lhs.raw == rhs.raw; }
bool operator!=(const Fx64& lhs, const Fx64& rhs) { return !(lhs == rhs); }

const Fx64 Fx64::CONST_0_5 = Fx64{0, 0x8000};
const Fx64 Fx64::CONST_0_75 = Fx64{0, 0xC000};
const Fx64 Fx64::CONST_1_5 = Fx64{0, 0x18000};

// pmdsky-debug: CeilFixedPoint ([NA] 0x2051064)
int32_t DecFx16_16::ceil() const {
    int32_t n = ipart;
    if (thousandths != 0) {
        n++;
    }
    return n;
}

// pmdsky-debug: ClampedLn ([NA] 0x20021F4)
Fx64 clamped_ln(int32_t x) {
    const Fx64 LOG_VALUE_TABLE[2048] = {
        {0, 0x0},     {0, 0x0},     {0, 0xB170},  {0, 0x11930}, {0, 0x162E0}, {0, 0x19C00},
        {0, 0x1CAB0}, {0, 0x1F220}, {0, 0x21450}, {0, 0x23270}, {0, 0x24D70}, {0, 0x265D0},
        {0, 0x27C20}, {0, 0x290A0}, {0, 0x2A390}, {0, 0x2B540}, {0, 0x2C5C0}, {0, 0x2D540},
        {0, 0x2E3E0}, {0, 0x2F1C0}, {0, 0x2FEE0}, {0, 0x30B60}, {0, 0x31740}, {0, 0x322A0},
        {0, 0x32D90}, {0, 0x33800}, {0, 0x34210}, {0, 0x34BB0}, {0, 0x35500}, {0, 0x35E00},
        {0, 0x366B0}, {0, 0x36F10}, {0, 0x37730}, {0, 0x37F10}, {0, 0x386B0}, {0, 0x38E20},
        {0, 0x39560}, {0, 0x39C60}, {0, 0x3A330}, {0, 0x3A9D0}, {0, 0x3B050}, {0, 0x3B6A0},
        {0, 0x3BCD0}, {0, 0x3C2D0}, {0, 0x3C8C0}, {0, 0x3CE80}, {0, 0x3D420}, {0, 0x3D9A0},
        {0, 0x3DF00}, {0, 0x3E440}, {0, 0x3E970}, {0, 0x3EE80}, {0, 0x3F380}, {0, 0x3F860},
        {0, 0x3FD20}, {0, 0x401E0}, {0, 0x40670}, {0, 0x40B00}, {0, 0x40F70}, {0, 0x413D0},
        {0, 0x41820}, {0, 0x41C60}, {0, 0x42080}, {0, 0x424A0}, {0, 0x428A0}, {0, 0x42CA0},
        {0, 0x43080}, {0, 0x43460}, {0, 0x43830}, {0, 0x43BE0}, {0, 0x43F90}, {0, 0x44330},
        {0, 0x446D0}, {0, 0x44A50}, {0, 0x44DD0}, {0, 0x45140}, {0, 0x454A0}, {0, 0x45800},
        {0, 0x45B50}, {0, 0x45E90}, {0, 0x461C0}, {0, 0x464F0}, {0, 0x46810}, {0, 0x46B30},
        {0, 0x46E40}, {0, 0x47150}, {0, 0x47450}, {0, 0x47740}, {0, 0x47A30}, {0, 0x47D10},
        {0, 0x47FF0}, {0, 0x482C0}, {0, 0x48590}, {0, 0x48850}, {0, 0x48B10}, {0, 0x48DC0},
        {0, 0x49070}, {0, 0x49320}, {0, 0x495C0}, {0, 0x49850}, {0, 0x49AE0}, {0, 0x49D70},
        {0, 0x49FF0}, {0, 0x4A270}, {0, 0x4A4F0}, {0, 0x4A760}, {0, 0x4A9D0}, {0, 0x4AC30},
        {0, 0x4AEA0}, {0, 0x4B0F0}, {0, 0x4B350}, {0, 0x4B5A0}, {0, 0x4B7E0}, {0, 0x4BA30},
        {0, 0x4BC70}, {0, 0x4BEB0}, {0, 0x4C0E0}, {0, 0x4C310}, {0, 0x4C540}, {0, 0x4C770},
        {0, 0x4C990}, {0, 0x4CBB0}, {0, 0x4CDD0}, {0, 0x4CFE0}, {0, 0x4D1F0}, {0, 0x4D400},
        {0, 0x4D610}, {0, 0x4D810}, {0, 0x4DA10}, {0, 0x4DC10}, {0, 0x4DE10}, {0, 0x4E000},
        {0, 0x4E1F0}, {0, 0x4E3E0}, {0, 0x4E5D0}, {0, 0x4E7C0}, {0, 0x4E9A0}, {0, 0x4EB80},
        {0, 0x4ED60}, {0, 0x4EF30}, {0, 0x4F100}, {0, 0x4F2E0}, {0, 0x4F4B0}, {0, 0x4F670},
        {0, 0x4F840}, {0, 0x4FA00}, {0, 0x4FBC0}, {0, 0x4FD80}, {0, 0x4FF40}, {0, 0x50100},
        {0, 0x502B0}, {0, 0x50460}, {0, 0x50610}, {0, 0x507C0}, {0, 0x50970}, {0, 0x50B10},
        {0, 0x50CC0}, {0, 0x50E60}, {0, 0x51000}, {0, 0x511A0}, {0, 0x51330}, {0, 0x514D0},
        {0, 0x51660}, {0, 0x51800}, {0, 0x51990}, {0, 0x51B10}, {0, 0x51CA0}, {0, 0x51E30},
        {0, 0x51FB0}, {0, 0x52140}, {0, 0x522C0}, {0, 0x52440}, {0, 0x525C0}, {0, 0x52730},
        {0, 0x528B0}, {0, 0x52A20}, {0, 0x52BA0}, {0, 0x52D10}, {0, 0x52E80}, {0, 0x52FF0},
        {0, 0x53160}, {0, 0x532D0}, {0, 0x53430}, {0, 0x535A0}, {0, 0x53700}, {0, 0x53860},
        {0, 0x539C0}, {0, 0x53B20}, {0, 0x53C80}, {0, 0x53DE0}, {0, 0x53F30}, {0, 0x54090},
        {0, 0x541E0}, {0, 0x54330}, {0, 0x54490}, {0, 0x545E0}, {0, 0x54730}, {0, 0x54880},
        {0, 0x549C0}, {0, 0x54B10}, {0, 0x54C50}, {0, 0x54DA0}, {0, 0x54EE0}, {0, 0x55020},
        {0, 0x55170}, {0, 0x552B0}, {0, 0x553E0}, {0, 0x55520}, {0, 0x55660}, {0, 0x557A0},
        {0, 0x558D0}, {0, 0x55A10}, {0, 0x55B40}, {0, 0x55C70}, {0, 0x55DB0}, {0, 0x55EE0},
        {0, 0x56010}, {0, 0x56140}, {0, 0x56260}, {0, 0x56390}, {0, 0x564C0}, {0, 0x565E0},
        {0, 0x56710}, {0, 0x56830}, {0, 0x56960}, {0, 0x56A80}, {0, 0x56BA0}, {0, 0x56CC0},
        {0, 0x56DE0}, {0, 0x56F00}, {0, 0x57020}, {0, 0x57140}, {0, 0x57250}, {0, 0x57370},
        {0, 0x57480}, {0, 0x575A0}, {0, 0x576B0}, {0, 0x577D0}, {0, 0x578E0}, {0, 0x579F0},
        {0, 0x57B00}, {0, 0x57C10}, {0, 0x57D20}, {0, 0x57E30}, {0, 0x57F40}, {0, 0x58050},
        {0, 0x58150}, {0, 0x58260}, {0, 0x58370}, {0, 0x58470}, {0, 0x58570}, {0, 0x58680},
        {0, 0x58780}, {0, 0x58880}, {0, 0x58980}, {0, 0x58A90}, {0, 0x58B90}, {0, 0x58C90},
        {0, 0x58D80}, {0, 0x58E80}, {0, 0x58F80}, {0, 0x59080}, {0, 0x59170}, {0, 0x59270},
        {0, 0x59370}, {0, 0x59460}, {0, 0x59560}, {0, 0x59650}, {0, 0x59740}, {0, 0x59830},
        {0, 0x59930}, {0, 0x59A20}, {0, 0x59B10}, {0, 0x59C00}, {0, 0x59CF0}, {0, 0x59DE0},
        {0, 0x59ED0}, {0, 0x59FB0}, {0, 0x5A0A0}, {0, 0x5A190}, {0, 0x5A280}, {0, 0x5A360},
        {0, 0x5A450}, {0, 0x5A530}, {0, 0x5A620}, {0, 0x5A700}, {0, 0x5A7E0}, {0, 0x5A8D0},
        {0, 0x5A9B0}, {0, 0x5AA90}, {0, 0x5AB70}, {0, 0x5AC50}, {0, 0x5AD30}, {0, 0x5AE10},
        {0, 0x5AEF0}, {0, 0x5AFD0}, {0, 0x5B0B0}, {0, 0x5B190}, {0, 0x5B270}, {0, 0x5B350},
        {0, 0x5B420}, {0, 0x5B500}, {0, 0x5B5D0}, {0, 0x5B6B0}, {0, 0x5B780}, {0, 0x5B860},
        {0, 0x5B930}, {0, 0x5BA10}, {0, 0x5BAE0}, {0, 0x5BBB0}, {0, 0x5BC90}, {0, 0x5BD60},
        {0, 0x5BE30}, {0, 0x5BF00}, {0, 0x5BFD0}, {0, 0x5C0A0}, {0, 0x5C170}, {0, 0x5C240},
        {0, 0x5C310}, {0, 0x5C3E0}, {0, 0x5C4B0}, {0, 0x5C570}, {0, 0x5C640}, {0, 0x5C710},
        {0, 0x5C7D0}, {0, 0x5C8A0}, {0, 0x5C970}, {0, 0x5CA30}, {0, 0x5CB00}, {0, 0x5CBC0},
        {0, 0x5CC90}, {0, 0x5CD50}, {0, 0x5CE10}, {0, 0x5CEE0}, {0, 0x5CFA0}, {0, 0x5D060},
        {0, 0x5D120}, {0, 0x5D1F0}, {0, 0x5D2B0}, {0, 0x5D370}, {0, 0x5D430}, {0, 0x5D4F0},
        {0, 0x5D5B0}, {0, 0x5D670}, {0, 0x5D730}, {0, 0x5D7F0}, {0, 0x5D8B0}, {0, 0x5D960},
        {0, 0x5DA20}, {0, 0x5DAE0}, {0, 0x5DBA0}, {0, 0x5DC50}, {0, 0x5DD10}, {0, 0x5DDD0},
        {0, 0x5DE80}, {0, 0x5DF40}, {0, 0x5DFF0}, {0, 0x5E0B0}, {0, 0x5E160}, {0, 0x5E220},
        {0, 0x5E2D0}, {0, 0x5E380}, {0, 0x5E440}, {0, 0x5E4F0}, {0, 0x5E5A0}, {0, 0x5E650},
        {0, 0x5E710}, {0, 0x5E7C0}, {0, 0x5E870}, {0, 0x5E920}, {0, 0x5E9D0}, {0, 0x5EA80},
        {0, 0x5EB30}, {0, 0x5EBE0}, {0, 0x5EC90}, {0, 0x5ED40}, {0, 0x5EDF0}, {0, 0x5EEA0},
        {0, 0x5EF50}, {0, 0x5F000}, {0, 0x5F0A0}, {0, 0x5F150}, {0, 0x5F200}, {0, 0x5F2B0},
        {0, 0x5F350}, {0, 0x5F400}, {0, 0x5F4B0}, {0, 0x5F550}, {0, 0x5F600}, {0, 0x5F6A0},
        {0, 0x5F750}, {0, 0x5F7F0}, {0, 0x5F8A0}, {0, 0x5F940}, {0, 0x5F9F0}, {0, 0x5FA90},
        {0, 0x5FB30}, {0, 0x5FBE0}, {0, 0x5FC80}, {0, 0x5FD20}, {0, 0x5FDD0}, {0, 0x5FE70},
        {0, 0x5FF10}, {0, 0x5FFB0}, {0, 0x60050}, {0, 0x600F0}, {0, 0x601A0}, {0, 0x60240},
        {0, 0x602E0}, {0, 0x60380}, {0, 0x60420}, {0, 0x604C0}, {0, 0x60560}, {0, 0x60600},
        {0, 0x60690}, {0, 0x60730}, {0, 0x607D0}, {0, 0x60870}, {0, 0x60910}, {0, 0x609B0},
        {0, 0x60A40}, {0, 0x60AE0}, {0, 0x60B80}, {0, 0x60C20}, {0, 0x60CB0}, {0, 0x60D50},
        {0, 0x60DE0}, {0, 0x60E80}, {0, 0x60F20}, {0, 0x60FB0}, {0, 0x61050}, {0, 0x610E0},
        {0, 0x61180}, {0, 0x61210}, {0, 0x612B0}, {0, 0x61340}, {0, 0x613E0}, {0, 0x61470},
        {0, 0x61500}, {0, 0x615A0}, {0, 0x61630}, {0, 0x616C0}, {0, 0x61760}, {0, 0x617F0},
        {0, 0x61880}, {0, 0x61910}, {0, 0x619A0}, {0, 0x61A40}, {0, 0x61AD0}, {0, 0x61B60},
        {0, 0x61BF0}, {0, 0x61C80}, {0, 0x61D10}, {0, 0x61DA0}, {0, 0x61E30}, {0, 0x61EC0},
        {0, 0x61F50}, {0, 0x61FE0}, {0, 0x62070}, {0, 0x62100}, {0, 0x62190}, {0, 0x62220},
        {0, 0x622B0}, {0, 0x62340}, {0, 0x623C0}, {0, 0x62450}, {0, 0x624E0}, {0, 0x62570},
        {0, 0x62600}, {0, 0x62680}, {0, 0x62710}, {0, 0x627A0}, {0, 0x62820}, {0, 0x628B0},
        {0, 0x62940}, {0, 0x629C0}, {0, 0x62A50}, {0, 0x62AE0}, {0, 0x62B60}, {0, 0x62BF0},
        {0, 0x62C70}, {0, 0x62D00}, {0, 0x62D80}, {0, 0x62E10}, {0, 0x62E90}, {0, 0x62F20},
        {0, 0x62FA0}, {0, 0x63030}, {0, 0x630B0}, {0, 0x63130}, {0, 0x631C0}, {0, 0x63240},
        {0, 0x632C0}, {0, 0x63350}, {0, 0x633D0}, {0, 0x63450}, {0, 0x634E0}, {0, 0x63560},
        {0, 0x635E0}, {0, 0x63660}, {0, 0x636F0}, {0, 0x63770}, {0, 0x637F0}, {0, 0x63870},
        {0, 0x638F0}, {0, 0x63970}, {0, 0x639F0}, {0, 0x63A70}, {0, 0x63B00}, {0, 0x63B80},
        {0, 0x63C00}, {0, 0x63C80}, {0, 0x63D00}, {0, 0x63D80}, {0, 0x63E00}, {0, 0x63E80},
        {0, 0x63F00}, {0, 0x63F70}, {0, 0x63FF0}, {0, 0x64070}, {0, 0x640F0}, {0, 0x64170},
        {0, 0x641F0}, {0, 0x64270}, {0, 0x642F0}, {0, 0x64360}, {0, 0x643E0}, {0, 0x64460},
        {0, 0x644E0}, {0, 0x64550}, {0, 0x645D0}, {0, 0x64650}, {0, 0x646D0}, {0, 0x64740},
        {0, 0x647C0}, {0, 0x64840}, {0, 0x648B0}, {0, 0x64930}, {0, 0x649B0}, {0, 0x64A20},
        {0, 0x64AA0}, {0, 0x64B10}, {0, 0x64B90}, {0, 0x64C00}, {0, 0x64C80}, {0, 0x64D00},
        {0, 0x64D70}, {0, 0x64DF0}, {0, 0x64E60}, {0, 0x64ED0}, {0, 0x64F50}, {0, 0x64FC0},
        {0, 0x65040}, {0, 0x650B0}, {0, 0x65130}, {0, 0x651A0}, {0, 0x65210}, {0, 0x65290},
        {0, 0x65300}, {0, 0x65370}, {0, 0x653F0}, {0, 0x65460}, {0, 0x654D0}, {0, 0x65550},
        {0, 0x655C0}, {0, 0x65630}, {0, 0x656A0}, {0, 0x65720}, {0, 0x65790}, {0, 0x65800},
        {0, 0x65870}, {0, 0x658E0}, {0, 0x65960}, {0, 0x659D0}, {0, 0x65A40}, {0, 0x65AB0},
        {0, 0x65B20}, {0, 0x65B90}, {0, 0x65C00}, {0, 0x65C70}, {0, 0x65CE0}, {0, 0x65D60},
        {0, 0x65DD0}, {0, 0x65E40}, {0, 0x65EB0}, {0, 0x65F20}, {0, 0x65F90}, {0, 0x66000},
        {0, 0x66070}, {0, 0x660E0}, {0, 0x66140}, {0, 0x661B0}, {0, 0x66220}, {0, 0x66290},
        {0, 0x66300}, {0, 0x66370}, {0, 0x663E0}, {0, 0x66450}, {0, 0x664C0}, {0, 0x66520},
        {0, 0x66590}, {0, 0x66600}, {0, 0x66670}, {0, 0x666E0}, {0, 0x66750}, {0, 0x667B0},
        {0, 0x66820}, {0, 0x66890}, {0, 0x66900}, {0, 0x66960}, {0, 0x669D0}, {0, 0x66A40},
        {0, 0x66AA0}, {0, 0x66B10}, {0, 0x66B80}, {0, 0x66BE0}, {0, 0x66C50}, {0, 0x66CC0},
        {0, 0x66D20}, {0, 0x66D90}, {0, 0x66E00}, {0, 0x66E60}, {0, 0x66ED0}, {0, 0x66F30},
        {0, 0x66FA0}, {0, 0x67010}, {0, 0x67070}, {0, 0x670E0}, {0, 0x67140}, {0, 0x671B0},
        {0, 0x67210}, {0, 0x67280}, {0, 0x672E0}, {0, 0x67350}, {0, 0x673B0}, {0, 0x67420},
        {0, 0x67480}, {0, 0x674E0}, {0, 0x67550}, {0, 0x675B0}, {0, 0x67620}, {0, 0x67680},
        {0, 0x676E0}, {0, 0x67750}, {0, 0x677B0}, {0, 0x67820}, {0, 0x67880}, {0, 0x678E0},
        {0, 0x67950}, {0, 0x679B0}, {0, 0x67A10}, {0, 0x67A70}, {0, 0x67AE0}, {0, 0x67B40},
        {0, 0x67BA0}, {0, 0x67C10}, {0, 0x67C70}, {0, 0x67CD0}, {0, 0x67D30}, {0, 0x67DA0},
        {0, 0x67E00}, {0, 0x67E60}, {0, 0x67EC0}, {0, 0x67F20}, {0, 0x67F80}, {0, 0x67FF0},
        {0, 0x68050}, {0, 0x680B0}, {0, 0x68110}, {0, 0x68170}, {0, 0x681D0}, {0, 0x68230},
        {0, 0x682A0}, {0, 0x68300}, {0, 0x68360}, {0, 0x683C0}, {0, 0x68420}, {0, 0x68480},
        {0, 0x684E0}, {0, 0x68540}, {0, 0x685A0}, {0, 0x68600}, {0, 0x68660}, {0, 0x686C0},
        {0, 0x68720}, {0, 0x68780}, {0, 0x687E0}, {0, 0x68840}, {0, 0x688A0}, {0, 0x68900},
        {0, 0x68960}, {0, 0x689C0}, {0, 0x68A20}, {0, 0x68A80}, {0, 0x68AD0}, {0, 0x68B30},
        {0, 0x68B90}, {0, 0x68BF0}, {0, 0x68C50}, {0, 0x68CB0}, {0, 0x68D10}, {0, 0x68D70},
        {0, 0x68DC0}, {0, 0x68E20}, {0, 0x68E80}, {0, 0x68EE0}, {0, 0x68F40}, {0, 0x68F90},
        {0, 0x68FF0}, {0, 0x69050}, {0, 0x690B0}, {0, 0x69110}, {0, 0x69160}, {0, 0x691C0},
        {0, 0x69220}, {0, 0x69280}, {0, 0x692D0}, {0, 0x69330}, {0, 0x69390}, {0, 0x693E0},
        {0, 0x69440}, {0, 0x694A0}, {0, 0x694F0}, {0, 0x69550}, {0, 0x695B0}, {0, 0x69600},
        {0, 0x69660}, {0, 0x696C0}, {0, 0x69710}, {0, 0x69770}, {0, 0x697D0}, {0, 0x69820},
        {0, 0x69880}, {0, 0x698D0}, {0, 0x69930}, {0, 0x69990}, {0, 0x699E0}, {0, 0x69A40},
        {0, 0x69A90}, {0, 0x69AF0}, {0, 0x69B40}, {0, 0x69BA0}, {0, 0x69BF0}, {0, 0x69C50},
        {0, 0x69CA0}, {0, 0x69D00}, {0, 0x69D50}, {0, 0x69DB0}, {0, 0x69E00}, {0, 0x69E60},
        {0, 0x69EB0}, {0, 0x69F10}, {0, 0x69F60}, {0, 0x69FC0}, {0, 0x6A010}, {0, 0x6A070},
        {0, 0x6A0C0}, {0, 0x6A110}, {0, 0x6A170}, {0, 0x6A1C0}, {0, 0x6A220}, {0, 0x6A270},
        {0, 0x6A2C0}, {0, 0x6A320}, {0, 0x6A370}, {0, 0x6A3C0}, {0, 0x6A420}, {0, 0x6A470},
        {0, 0x6A4C0}, {0, 0x6A520}, {0, 0x6A570}, {0, 0x6A5C0}, {0, 0x6A620}, {0, 0x6A670},
        {0, 0x6A6C0}, {0, 0x6A720}, {0, 0x6A770}, {0, 0x6A7C0}, {0, 0x6A810}, {0, 0x6A870},
        {0, 0x6A8C0}, {0, 0x6A910}, {0, 0x6A960}, {0, 0x6A9C0}, {0, 0x6AA10}, {0, 0x6AA60},
        {0, 0x6AAB0}, {0, 0x6AB10}, {0, 0x6AB60}, {0, 0x6ABB0}, {0, 0x6AC00}, {0, 0x6AC50},
        {0, 0x6ACB0}, {0, 0x6AD00}, {0, 0x6AD50}, {0, 0x6ADA0}, {0, 0x6ADF0}, {0, 0x6AE40},
        {0, 0x6AE90}, {0, 0x6AEF0}, {0, 0x6AF40}, {0, 0x6AF90}, {0, 0x6AFE0}, {0, 0x6B030},
        {0, 0x6B080}, {0, 0x6B0D0}, {0, 0x6B120}, {0, 0x6B170}, {0, 0x6B1C0}, {0, 0x6B210},
        {0, 0x6B270}, {0, 0x6B2C0}, {0, 0x6B310}, {0, 0x6B360}, {0, 0x6B3B0}, {0, 0x6B400},
        {0, 0x6B450}, {0, 0x6B4A0}, {0, 0x6B4F0}, {0, 0x6B540}, {0, 0x6B590}, {0, 0x6B5E0},
        {0, 0x6B630}, {0, 0x6B680}, {0, 0x6B6D0}, {0, 0x6B720}, {0, 0x6B770}, {0, 0x6B7C0},
        {0, 0x6B810}, {0, 0x6B860}, {0, 0x6B8A0}, {0, 0x6B8F0}, {0, 0x6B940}, {0, 0x6B990},
        {0, 0x6B9E0}, {0, 0x6BA30}, {0, 0x6BA80}, {0, 0x6BAD0}, {0, 0x6BB20}, {0, 0x6BB70},
        {0, 0x6BBC0}, {0, 0x6BC00}, {0, 0x6BC50}, {0, 0x6BCA0}, {0, 0x6BCF0}, {0, 0x6BD40},
        {0, 0x6BD90}, {0, 0x6BDE0}, {0, 0x6BE20}, {0, 0x6BE70}, {0, 0x6BEC0}, {0, 0x6BF10},
        {0, 0x6BF60}, {0, 0x6BFA0}, {0, 0x6BFF0}, {0, 0x6C040}, {0, 0x6C090}, {0, 0x6C0E0},
        {0, 0x6C120}, {0, 0x6C170}, {0, 0x6C1C0}, {0, 0x6C210}, {0, 0x6C250}, {0, 0x6C2A0},
        {0, 0x6C2F0}, {0, 0x6C340}, {0, 0x6C380}, {0, 0x6C3D0}, {0, 0x6C420}, {0, 0x6C470},
        {0, 0x6C4B0}, {0, 0x6C500}, {0, 0x6C550}, {0, 0x6C590}, {0, 0x6C5E0}, {0, 0x6C630},
        {0, 0x6C670}, {0, 0x6C6C0}, {0, 0x6C710}, {0, 0x6C750}, {0, 0x6C7A0}, {0, 0x6C7F0},
        {0, 0x6C830}, {0, 0x6C880}, {0, 0x6C8D0}, {0, 0x6C910}, {0, 0x6C960}, {0, 0x6C9B0},
        {0, 0x6C9F0}, {0, 0x6CA40}, {0, 0x6CA80}, {0, 0x6CAD0}, {0, 0x6CB20}, {0, 0x6CB60},
        {0, 0x6CBB0}, {0, 0x6CBF0}, {0, 0x6CC40}, {0, 0x6CC80}, {0, 0x6CCD0}, {0, 0x6CD20},
        {0, 0x6CD60}, {0, 0x6CDB0}, {0, 0x6CDF0}, {0, 0x6CE40}, {0, 0x6CE80}, {0, 0x6CED0},
        {0, 0x6CF10}, {0, 0x6CF60}, {0, 0x6CFA0}, {0, 0x6CFF0}, {0, 0x6D030}, {0, 0x6D080},
        {0, 0x6D0C0}, {0, 0x6D110}, {0, 0x6D150}, {0, 0x6D1A0}, {0, 0x6D1E0}, {0, 0x6D230},
        {0, 0x6D270}, {0, 0x6D2C0}, {0, 0x6D300}, {0, 0x6D350}, {0, 0x6D390}, {0, 0x6D3D0},
        {0, 0x6D420}, {0, 0x6D460}, {0, 0x6D4B0}, {0, 0x6D4F0}, {0, 0x6D540}, {0, 0x6D580},
        {0, 0x6D5C0}, {0, 0x6D610}, {0, 0x6D650}, {0, 0x6D6A0}, {0, 0x6D6E0}, {0, 0x6D720},
        {0, 0x6D770}, {0, 0x6D7B0}, {0, 0x6D7F0}, {0, 0x6D840}, {0, 0x6D880}, {0, 0x6D8D0},
        {0, 0x6D910}, {0, 0x6D950}, {0, 0x6D9A0}, {0, 0x6D9E0}, {0, 0x6DA20}, {0, 0x6DA70},
        {0, 0x6DAB0}, {0, 0x6DAF0}, {0, 0x6DB40}, {0, 0x6DB80}, {0, 0x6DBC0}, {0, 0x6DC00},
        {0, 0x6DC50}, {0, 0x6DC90}, {0, 0x6DCD0}, {0, 0x6DD20}, {0, 0x6DD60}, {0, 0x6DDA0},
        {0, 0x6DDE0}, {0, 0x6DE30}, {0, 0x6DE70}, {0, 0x6DEB0}, {0, 0x6DEF0}, {0, 0x6DF40},
        {0, 0x6DF80}, {0, 0x6DFC0}, {0, 0x6E000}, {0, 0x6E050}, {0, 0x6E090}, {0, 0x6E0D0},
        {0, 0x6E110}, {0, 0x6E160}, {0, 0x6E1A0}, {0, 0x6E1E0}, {0, 0x6E220}, {0, 0x6E260},
        {0, 0x6E2B0}, {0, 0x6E2F0}, {0, 0x6E330}, {0, 0x6E370}, {0, 0x6E3B0}, {0, 0x6E3F0},
        {0, 0x6E440}, {0, 0x6E480}, {0, 0x6E4C0}, {0, 0x6E500}, {0, 0x6E540}, {0, 0x6E580},
        {0, 0x6E5C0}, {0, 0x6E610}, {0, 0x6E650}, {0, 0x6E690}, {0, 0x6E6D0}, {0, 0x6E710},
        {0, 0x6E750}, {0, 0x6E790}, {0, 0x6E7D0}, {0, 0x6E820}, {0, 0x6E860}, {0, 0x6E8A0},
        {0, 0x6E8E0}, {0, 0x6E920}, {0, 0x6E960}, {0, 0x6E9A0}, {0, 0x6E9E0}, {0, 0x6EA20},
        {0, 0x6EA60}, {0, 0x6EAA0}, {0, 0x6EAE0}, {0, 0x6EB20}, {0, 0x6EB70}, {0, 0x6EBB0},
        {0, 0x6EBF0}, {0, 0x6EC30}, {0, 0x6EC70}, {0, 0x6ECB0}, {0, 0x6ECF0}, {0, 0x6ED30},
        {0, 0x6ED70}, {0, 0x6EDB0}, {0, 0x6EDF0}, {0, 0x6EE30}, {0, 0x6EE70}, {0, 0x6EEB0},
        {0, 0x6EEF0}, {0, 0x6EF30}, {0, 0x6EF70}, {0, 0x6EFB0}, {0, 0x6EFF0}, {0, 0x6F030},
        {0, 0x6F070}, {0, 0x6F0B0}, {0, 0x6F0F0}, {0, 0x6F130}, {0, 0x6F170}, {0, 0x6F1A0},
        {0, 0x6F1E0}, {0, 0x6F220}, {0, 0x6F260}, {0, 0x6F2A0}, {0, 0x6F2E0}, {0, 0x6F320},
        {0, 0x6F360}, {0, 0x6F3A0}, {0, 0x6F3E0}, {0, 0x6F420}, {0, 0x6F460}, {0, 0x6F4A0},
        {0, 0x6F4E0}, {0, 0x6F510}, {0, 0x6F550}, {0, 0x6F590}, {0, 0x6F5D0}, {0, 0x6F610},
        {0, 0x6F650}, {0, 0x6F690}, {0, 0x6F6D0}, {0, 0x6F700}, {0, 0x6F740}, {0, 0x6F780},
        {0, 0x6F7C0}, {0, 0x6F800}, {0, 0x6F840}, {0, 0x6F880}, {0, 0x6F8B0}, {0, 0x6F8F0},
        {0, 0x6F930}, {0, 0x6F970}, {0, 0x6F9B0}, {0, 0x6F9F0}, {0, 0x6FA20}, {0, 0x6FA60},
        {0, 0x6FAA0}, {0, 0x6FAE0}, {0, 0x6FB20}, {0, 0x6FB60}, {0, 0x6FB90}, {0, 0x6FBD0},
        {0, 0x6FC10}, {0, 0x6FC50}, {0, 0x6FC80}, {0, 0x6FCC0}, {0, 0x6FD00}, {0, 0x6FD40},
        {0, 0x6FD80}, {0, 0x6FDB0}, {0, 0x6FDF0}, {0, 0x6FE30}, {0, 0x6FE70}, {0, 0x6FEA0},
        {0, 0x6FEE0}, {0, 0x6FF20}, {0, 0x6FF60}, {0, 0x6FF90}, {0, 0x6FFD0}, {0, 0x70010},
        {0, 0x70050}, {0, 0x70080}, {0, 0x700C0}, {0, 0x70100}, {0, 0x70130}, {0, 0x70170},
        {0, 0x701B0}, {0, 0x701F0}, {0, 0x70220}, {0, 0x70260}, {0, 0x702A0}, {0, 0x702D0},
        {0, 0x70310}, {0, 0x70350}, {0, 0x70380}, {0, 0x703C0}, {0, 0x70400}, {0, 0x70440},
        {0, 0x70470}, {0, 0x704B0}, {0, 0x704F0}, {0, 0x70520}, {0, 0x70560}, {0, 0x705A0},
        {0, 0x705D0}, {0, 0x70610}, {0, 0x70640}, {0, 0x70680}, {0, 0x706C0}, {0, 0x706F0},
        {0, 0x70730}, {0, 0x70770}, {0, 0x707A0}, {0, 0x707E0}, {0, 0x70820}, {0, 0x70850},
        {0, 0x70890}, {0, 0x708C0}, {0, 0x70900}, {0, 0x70940}, {0, 0x70970}, {0, 0x709B0},
        {0, 0x709E0}, {0, 0x70A20}, {0, 0x70A60}, {0, 0x70A90}, {0, 0x70AD0}, {0, 0x70B00},
        {0, 0x70B40}, {0, 0x70B70}, {0, 0x70BB0}, {0, 0x70BF0}, {0, 0x70C20}, {0, 0x70C60},
        {0, 0x70C90}, {0, 0x70CD0}, {0, 0x70D00}, {0, 0x70D40}, {0, 0x70D70}, {0, 0x70DB0},
        {0, 0x70DF0}, {0, 0x70E20}, {0, 0x70E60}, {0, 0x70E90}, {0, 0x70ED0}, {0, 0x70F00},
        {0, 0x70F40}, {0, 0x70F70}, {0, 0x70FB0}, {0, 0x70FE0}, {0, 0x71020}, {0, 0x71050},
        {0, 0x71090}, {0, 0x710C0}, {0, 0x71100}, {0, 0x71130}, {0, 0x71170}, {0, 0x711A0},
        {0, 0x711E0}, {0, 0x71210}, {0, 0x71250}, {0, 0x71280}, {0, 0x712C0}, {0, 0x712F0},
        {0, 0x71330}, {0, 0x71360}, {0, 0x71390}, {0, 0x713D0}, {0, 0x71400}, {0, 0x71440},
        {0, 0x71470}, {0, 0x714B0}, {0, 0x714E0}, {0, 0x71520}, {0, 0x71550}, {0, 0x71580},
        {0, 0x715C0}, {0, 0x715F0}, {0, 0x71630}, {0, 0x71660}, {0, 0x716A0}, {0, 0x716D0},
        {0, 0x71700}, {0, 0x71740}, {0, 0x71770}, {0, 0x717B0}, {0, 0x717E0}, {0, 0x71810},
        {0, 0x71850}, {0, 0x71880}, {0, 0x718C0}, {0, 0x718F0}, {0, 0x71920}, {0, 0x71960},
        {0, 0x71990}, {0, 0x719D0}, {0, 0x71A00}, {0, 0x71A30}, {0, 0x71A70}, {0, 0x71AA0},
        {0, 0x71AD0}, {0, 0x71B10}, {0, 0x71B40}, {0, 0x71B80}, {0, 0x71BB0}, {0, 0x71BE0},
        {0, 0x71C20}, {0, 0x71C50}, {0, 0x71C80}, {0, 0x71CC0}, {0, 0x71CF0}, {0, 0x71D20},
        {0, 0x71D60}, {0, 0x71D90}, {0, 0x71DC0}, {0, 0x71E00}, {0, 0x71E30}, {0, 0x71E60},
        {0, 0x71EA0}, {0, 0x71ED0}, {0, 0x71F00}, {0, 0x71F30}, {0, 0x71F70}, {0, 0x71FA0},
        {0, 0x71FD0}, {0, 0x72010}, {0, 0x72040}, {0, 0x72070}, {0, 0x720B0}, {0, 0x720E0},
        {0, 0x72110}, {0, 0x72140}, {0, 0x72180}, {0, 0x721B0}, {0, 0x721E0}, {0, 0x72210},
        {0, 0x72250}, {0, 0x72280}, {0, 0x722B0}, {0, 0x722F0}, {0, 0x72320}, {0, 0x72350},
        {0, 0x72380}, {0, 0x723C0}, {0, 0x723F0}, {0, 0x72420}, {0, 0x72450}, {0, 0x72490},
        {0, 0x724C0}, {0, 0x724F0}, {0, 0x72520}, {0, 0x72550}, {0, 0x72590}, {0, 0x725C0},
        {0, 0x725F0}, {0, 0x72620}, {0, 0x72660}, {0, 0x72690}, {0, 0x726C0}, {0, 0x726F0},
        {0, 0x72720}, {0, 0x72760}, {0, 0x72790}, {0, 0x727C0}, {0, 0x727F0}, {0, 0x72820},
        {0, 0x72860}, {0, 0x72890}, {0, 0x728C0}, {0, 0x728F0}, {0, 0x72920}, {0, 0x72960},
        {0, 0x72990}, {0, 0x729C0}, {0, 0x729F0}, {0, 0x72A20}, {0, 0x72A50}, {0, 0x72A90},
        {0, 0x72AC0}, {0, 0x72AF0}, {0, 0x72B20}, {0, 0x72B50}, {0, 0x72B80}, {0, 0x72BB0},
        {0, 0x72BF0}, {0, 0x72C20}, {0, 0x72C50}, {0, 0x72C80}, {0, 0x72CB0}, {0, 0x72CE0},
        {0, 0x72D10}, {0, 0x72D50}, {0, 0x72D80}, {0, 0x72DB0}, {0, 0x72DE0}, {0, 0x72E10},
        {0, 0x72E40}, {0, 0x72E70}, {0, 0x72EA0}, {0, 0x72EE0}, {0, 0x72F10}, {0, 0x72F40},
        {0, 0x72F70}, {0, 0x72FA0}, {0, 0x72FD0}, {0, 0x73000}, {0, 0x73030}, {0, 0x73060},
        {0, 0x73090}, {0, 0x730D0}, {0, 0x73100}, {0, 0x73130}, {0, 0x73160}, {0, 0x73190},
        {0, 0x731C0}, {0, 0x731F0}, {0, 0x73220}, {0, 0x73250}, {0, 0x73280}, {0, 0x732B0},
        {0, 0x732E0}, {0, 0x73310}, {0, 0x73340}, {0, 0x73370}, {0, 0x733B0}, {0, 0x733E0},
        {0, 0x73410}, {0, 0x73440}, {0, 0x73470}, {0, 0x734A0}, {0, 0x734D0}, {0, 0x73500},
        {0, 0x73530}, {0, 0x73560}, {0, 0x73590}, {0, 0x735C0}, {0, 0x735F0}, {0, 0x73620},
        {0, 0x73650}, {0, 0x73680}, {0, 0x736B0}, {0, 0x736E0}, {0, 0x73710}, {0, 0x73740},
        {0, 0x73770}, {0, 0x737A0}, {0, 0x737D0}, {0, 0x73800}, {0, 0x73830}, {0, 0x73860},
        {0, 0x73890}, {0, 0x738C0}, {0, 0x738F0}, {0, 0x73920}, {0, 0x73950}, {0, 0x73980},
        {0, 0x739B0}, {0, 0x739E0}, {0, 0x73A10}, {0, 0x73A40}, {0, 0x73A70}, {0, 0x73AA0},
        {0, 0x73AD0}, {0, 0x73B00}, {0, 0x73B30}, {0, 0x73B60}, {0, 0x73B90}, {0, 0x73BC0},
        {0, 0x73BF0}, {0, 0x73C20}, {0, 0x73C50}, {0, 0x73C80}, {0, 0x73CA0}, {0, 0x73CD0},
        {0, 0x73D00}, {0, 0x73D30}, {0, 0x73D60}, {0, 0x73D90}, {0, 0x73DC0}, {0, 0x73DF0},
        {0, 0x73E20}, {0, 0x73E50}, {0, 0x73E80}, {0, 0x73EB0}, {0, 0x73EE0}, {0, 0x73F10},
        {0, 0x73F40}, {0, 0x73F60}, {0, 0x73F90}, {0, 0x73FC0}, {0, 0x73FF0}, {0, 0x74020},
        {0, 0x74050}, {0, 0x74080}, {0, 0x740B0}, {0, 0x740E0}, {0, 0x74110}, {0, 0x74140},
        {0, 0x74160}, {0, 0x74190}, {0, 0x741C0}, {0, 0x741F0}, {0, 0x74220}, {0, 0x74250},
        {0, 0x74280}, {0, 0x742B0}, {0, 0x742D0}, {0, 0x74300}, {0, 0x74330}, {0, 0x74360},
        {0, 0x74390}, {0, 0x743C0}, {0, 0x743F0}, {0, 0x74420}, {0, 0x74440}, {0, 0x74470},
        {0, 0x744A0}, {0, 0x744D0}, {0, 0x74500}, {0, 0x74530}, {0, 0x74560}, {0, 0x74580},
        {0, 0x745B0}, {0, 0x745E0}, {0, 0x74610}, {0, 0x74640}, {0, 0x74670}, {0, 0x74690},
        {0, 0x746C0}, {0, 0x746F0}, {0, 0x74720}, {0, 0x74750}, {0, 0x74780}, {0, 0x747A0},
        {0, 0x747D0}, {0, 0x74800}, {0, 0x74830}, {0, 0x74860}, {0, 0x74890}, {0, 0x748B0},
        {0, 0x748E0}, {0, 0x74910}, {0, 0x74940}, {0, 0x74970}, {0, 0x74990}, {0, 0x749C0},
        {0, 0x749F0}, {0, 0x74A20}, {0, 0x74A50}, {0, 0x74A70}, {0, 0x74AA0}, {0, 0x74AD0},
        {0, 0x74B00}, {0, 0x74B20}, {0, 0x74B50}, {0, 0x74B80}, {0, 0x74BB0}, {0, 0x74BE0},
        {0, 0x74C00}, {0, 0x74C30}, {0, 0x74C60}, {0, 0x74C90}, {0, 0x74CB0}, {0, 0x74CE0},
        {0, 0x74D10}, {0, 0x74D40}, {0, 0x74D70}, {0, 0x74D90}, {0, 0x74DC0}, {0, 0x74DF0},
        {0, 0x74E20}, {0, 0x74E40}, {0, 0x74E70}, {0, 0x74EA0}, {0, 0x74ED0}, {0, 0x74EF0},
        {0, 0x74F20}, {0, 0x74F50}, {0, 0x74F80}, {0, 0x74FA0}, {0, 0x74FD0}, {0, 0x75000},
        {0, 0x75020}, {0, 0x75050}, {0, 0x75080}, {0, 0x750B0}, {0, 0x750D0}, {0, 0x75100},
        {0, 0x75130}, {0, 0x75160}, {0, 0x75180}, {0, 0x751B0}, {0, 0x751E0}, {0, 0x75200},
        {0, 0x75230}, {0, 0x75260}, {0, 0x75290}, {0, 0x752B0}, {0, 0x752E0}, {0, 0x75310},
        {0, 0x75330}, {0, 0x75360}, {0, 0x75390}, {0, 0x753B0}, {0, 0x753E0}, {0, 0x75410},
        {0, 0x75430}, {0, 0x75460}, {0, 0x75490}, {0, 0x754C0}, {0, 0x754E0}, {0, 0x75510},
        {0, 0x75540}, {0, 0x75560}, {0, 0x75590}, {0, 0x755C0}, {0, 0x755E0}, {0, 0x75610},
        {0, 0x75640}, {0, 0x75660}, {0, 0x75690}, {0, 0x756C0}, {0, 0x756E0}, {0, 0x75710},
        {0, 0x75740}, {0, 0x75760}, {0, 0x75790}, {0, 0x757C0}, {0, 0x757E0}, {0, 0x75810},
        {0, 0x75830}, {0, 0x75860}, {0, 0x75890}, {0, 0x758B0}, {0, 0x758E0}, {0, 0x75910},
        {0, 0x75930}, {0, 0x75960}, {0, 0x75990}, {0, 0x759B0}, {0, 0x759E0}, {0, 0x75A00},
        {0, 0x75A30}, {0, 0x75A60}, {0, 0x75A80}, {0, 0x75AB0}, {0, 0x75AE0}, {0, 0x75B00},
        {0, 0x75B30}, {0, 0x75B50}, {0, 0x75B80}, {0, 0x75BB0}, {0, 0x75BD0}, {0, 0x75C00},
        {0, 0x75C20}, {0, 0x75C50}, {0, 0x75C80}, {0, 0x75CA0}, {0, 0x75CD0}, {0, 0x75CF0},
        {0, 0x75D20}, {0, 0x75D50}, {0, 0x75D70}, {0, 0x75DA0}, {0, 0x75DC0}, {0, 0x75DF0},
        {0, 0x75E20}, {0, 0x75E40}, {0, 0x75E70}, {0, 0x75E90}, {0, 0x75EC0}, {0, 0x75EF0},
        {0, 0x75F10}, {0, 0x75F40}, {0, 0x75F60}, {0, 0x75F90}, {0, 0x75FB0}, {0, 0x75FE0},
        {0, 0x76010}, {0, 0x76030}, {0, 0x76060}, {0, 0x76080}, {0, 0x760B0}, {0, 0x760D0},
        {0, 0x76100}, {0, 0x76120}, {0, 0x76150}, {0, 0x76180}, {0, 0x761A0}, {0, 0x761D0},
        {0, 0x761F0}, {0, 0x76220}, {0, 0x76240}, {0, 0x76270}, {0, 0x76290}, {0, 0x762C0},
        {0, 0x762E0}, {0, 0x76310}, {0, 0x76340}, {0, 0x76360}, {0, 0x76390}, {0, 0x763B0},
        {0, 0x763E0}, {0, 0x76400}, {0, 0x76430}, {0, 0x76450}, {0, 0x76480}, {0, 0x764A0},
        {0, 0x764D0}, {0, 0x764F0}, {0, 0x76520}, {0, 0x76540}, {0, 0x76570}, {0, 0x76590},
        {0, 0x765C0}, {0, 0x765E0}, {0, 0x76610}, {0, 0x76630}, {0, 0x76660}, {0, 0x76680},
        {0, 0x766B0}, {0, 0x766D0}, {0, 0x76700}, {0, 0x76720}, {0, 0x76750}, {0, 0x76770},
        {0, 0x767A0}, {0, 0x767C0}, {0, 0x767F0}, {0, 0x76810}, {0, 0x76840}, {0, 0x76860},
        {0, 0x76890}, {0, 0x768B0}, {0, 0x768E0}, {0, 0x76900}, {0, 0x76930}, {0, 0x76950},
        {0, 0x76980}, {0, 0x769A0}, {0, 0x769D0}, {0, 0x769F0}, {0, 0x76A20}, {0, 0x76A40},
        {0, 0x76A70}, {0, 0x76A90}, {0, 0x76AB0}, {0, 0x76AE0}, {0, 0x76B00}, {0, 0x76B30},
        {0, 0x76B50}, {0, 0x76B80}, {0, 0x76BA0}, {0, 0x76BD0}, {0, 0x76BF0}, {0, 0x76C20},
        {0, 0x76C40}, {0, 0x76C60}, {0, 0x76C90}, {0, 0x76CB0}, {0, 0x76CE0}, {0, 0x76D00},
        {0, 0x76D30}, {0, 0x76D50}, {0, 0x76D80}, {0, 0x76DA0}, {0, 0x76DC0}, {0, 0x76DF0},
        {0, 0x76E10}, {0, 0x76E40}, {0, 0x76E60}, {0, 0x76E90}, {0, 0x76EB0}, {0, 0x76ED0},
        {0, 0x76F00}, {0, 0x76F20}, {0, 0x76F50}, {0, 0x76F70}, {0, 0x76F90}, {0, 0x76FC0},
        {0, 0x76FE0}, {0, 0x77010}, {0, 0x77030}, {0, 0x77060}, {0, 0x77080}, {0, 0x770A0},
        {0, 0x770D0}, {0, 0x770F0}, {0, 0x77120}, {0, 0x77140}, {0, 0x77160}, {0, 0x77190},
        {0, 0x771B0}, {0, 0x771E0}, {0, 0x77200}, {0, 0x77220}, {0, 0x77250}, {0, 0x77270},
        {0, 0x77290}, {0, 0x772C0}, {0, 0x772E0}, {0, 0x77310}, {0, 0x77330}, {0, 0x77350},
        {0, 0x77380}, {0, 0x773A0}, {0, 0x773D0}, {0, 0x773F0}, {0, 0x77410}, {0, 0x77440},
        {0, 0x77460}, {0, 0x77480}, {0, 0x774B0}, {0, 0x774D0}, {0, 0x77500}, {0, 0x77520},
        {0, 0x77540}, {0, 0x77570}, {0, 0x77590}, {0, 0x775B0}, {0, 0x775E0}, {0, 0x77600},
        {0, 0x77620}, {0, 0x77650}, {0, 0x77670}, {0, 0x77690}, {0, 0x776C0}, {0, 0x776E0},
        {0, 0x77700}, {0, 0x77730}, {0, 0x77750}, {0, 0x77780}, {0, 0x777A0}, {0, 0x777C0},
        {0, 0x777F0}, {0, 0x77810}, {0, 0x77830}, {0, 0x77860}, {0, 0x77880}, {0, 0x778A0},
        {0, 0x778D0}, {0, 0x778F0}, {0, 0x77910}, {0, 0x77940}, {0, 0x77960}, {0, 0x77980},
        {0, 0x779A0}, {0, 0x779D0}, {0, 0x779F0}, {0, 0x77A10}, {0, 0x77A40}, {0, 0x77A60},
        {0, 0x77A80}, {0, 0x77AB0}, {0, 0x77AD0}, {0, 0x77AF0}, {0, 0x77B20}, {0, 0x77B40},
        {0, 0x77B60}, {0, 0x77B90}, {0, 0x77BB0}, {0, 0x77BD0}, {0, 0x77BF0}, {0, 0x77C20},
        {0, 0x77C40}, {0, 0x77C60}, {0, 0x77C90}, {0, 0x77CB0}, {0, 0x77CD0}, {0, 0x77D00},
        {0, 0x77D20}, {0, 0x77D40}, {0, 0x77D60}, {0, 0x77D90}, {0, 0x77DB0}, {0, 0x77DD0},
        {0, 0x77E00}, {0, 0x77E20}, {0, 0x77E40}, {0, 0x77E60}, {0, 0x77E90}, {0, 0x77EB0},
        {0, 0x77ED0}, {0, 0x77F00}, {0, 0x77F20}, {0, 0x77F40}, {0, 0x77F60}, {0, 0x77F90},
        {0, 0x77FB0}, {0, 0x77FD0}, {0, 0x77FF0}, {0, 0x78020}, {0, 0x78040}, {0, 0x78060},
        {0, 0x78080}, {0, 0x780B0}, {0, 0x780D0}, {0, 0x780F0}, {0, 0x78110}, {0, 0x78140},
        {0, 0x78160}, {0, 0x78180}, {0, 0x781A0}, {0, 0x781D0}, {0, 0x781F0}, {0, 0x78210},
        {0, 0x78230}, {0, 0x78260}, {0, 0x78280}, {0, 0x782A0}, {0, 0x782C0}, {0, 0x782F0},
        {0, 0x78310}, {0, 0x78330}, {0, 0x78350}, {0, 0x78380}, {0, 0x783A0}, {0, 0x783C0},
        {0, 0x783E0}, {0, 0x78410}, {0, 0x78430}, {0, 0x78450}, {0, 0x78470}, {0, 0x78490},
        {0, 0x784C0}, {0, 0x784E0}, {0, 0x78500}, {0, 0x78520}, {0, 0x78550}, {0, 0x78570},
        {0, 0x78590}, {0, 0x785B0}, {0, 0x785D0}, {0, 0x78600}, {0, 0x78620}, {0, 0x78640},
        {0, 0x78660}, {0, 0x78690}, {0, 0x786B0}, {0, 0x786D0}, {0, 0x786F0}, {0, 0x78710},
        {0, 0x78740}, {0, 0x78760}, {0, 0x78780}, {0, 0x787A0}, {0, 0x787C0}, {0, 0x787F0},
        {0, 0x78810}, {0, 0x78830}, {0, 0x78850}, {0, 0x78870}, {0, 0x788A0}, {0, 0x788C0},
        {0, 0x788E0}, {0, 0x78900}, {0, 0x78920}, {0, 0x78940}, {0, 0x78970}, {0, 0x78990},
        {0, 0x789B0}, {0, 0x789D0}, {0, 0x789F0}, {0, 0x78A20}, {0, 0x78A40}, {0, 0x78A60},
        {0, 0x78A80}, {0, 0x78AA0}, {0, 0x78AC0}, {0, 0x78AF0}, {0, 0x78B10}, {0, 0x78B30},
        {0, 0x78B50}, {0, 0x78B70}, {0, 0x78B90}, {0, 0x78BC0}, {0, 0x78BE0}, {0, 0x78C00},
        {0, 0x78C20}, {0, 0x78C40}, {0, 0x78C60}, {0, 0x78C90}, {0, 0x78CB0}, {0, 0x78CD0},
        {0, 0x78CF0}, {0, 0x78D10}, {0, 0x78D30}, {0, 0x78D50}, {0, 0x78D80}, {0, 0x78DA0},
        {0, 0x78DC0}, {0, 0x78DE0}, {0, 0x78E00}, {0, 0x78E20}, {0, 0x78E40}, {0, 0x78E70},
        {0, 0x78E90}, {0, 0x78EB0}, {0, 0x78ED0}, {0, 0x78EF0}, {0, 0x78F10}, {0, 0x78F30},
        {0, 0x78F60}, {0, 0x78F80}, {0, 0x78FA0}, {0, 0x78FC0}, {0, 0x78FE0}, {0, 0x79000},
        {0, 0x79020}, {0, 0x79040}, {0, 0x79070}, {0, 0x79090}, {0, 0x790B0}, {0, 0x790D0},
        {0, 0x790F0}, {0, 0x79110}, {0, 0x79130}, {0, 0x79150}, {0, 0x79180}, {0, 0x791A0},
        {0, 0x791C0}, {0, 0x791E0}, {0, 0x79200}, {0, 0x79220}, {0, 0x79240}, {0, 0x79260},
        {0, 0x79280}, {0, 0x792B0}, {0, 0x792D0}, {0, 0x792F0}, {0, 0x79310}, {0, 0x79330},
        {0, 0x79350}, {0, 0x79370}, {0, 0x79390}, {0, 0x793B0}, {0, 0x793D0}, {0, 0x79400},
        {0, 0x79420}, {0, 0x79440}, {0, 0x79460}, {0, 0x79480}, {0, 0x794A0}, {0, 0x794C0},
        {0, 0x794E0}, {0, 0x79500}, {0, 0x79520}, {0, 0x79540}, {0, 0x79570}, {0, 0x79590},
        {0, 0x795B0}, {0, 0x795D0}, {0, 0x795F0}, {0, 0x79610}, {0, 0x79630}, {0, 0x79650},
        {0, 0x79670}, {0, 0x79690}, {0, 0x796B0}, {0, 0x796D0}, {0, 0x796F0}, {0, 0x79720},
        {0, 0x79740}, {0, 0x79760}, {0, 0x79780}, {0, 0x797A0}, {0, 0x797C0}, {0, 0x797E0},
        {0, 0x79800}, {0, 0x79820}, {0, 0x79840}, {0, 0x79860}, {0, 0x79880}, {0, 0x798A0},
        {0, 0x798C0}, {0, 0x798E0}, {0, 0x79900}, {0, 0x79930}, {0, 0x79950}, {0, 0x79970},
        {0, 0x79990}, {0, 0x799B0}, {0, 0x799D0}, {0, 0x799F0}, {0, 0x79A10}, {0, 0x79A30},
        {0, 0x79A50}, {0, 0x79A70}, {0, 0x79A90}, {0, 0x79AB0}, {0, 0x79AD0}, {0, 0x79AF0},
        {0, 0x79B10}, {0, 0x79B30}, {0, 0x79B50}, {0, 0x79B70}, {0, 0x79B90}, {0, 0x79BB0},
        {0, 0x79BD0}, {0, 0x79BF0}, {0, 0x79C10}, {0, 0x79C40}, {0, 0x79C60}, {0, 0x79C80},
        {0, 0x79CA0}, {0, 0x79CC0}, {0, 0x79CE0}, {0, 0x79D00}, {0, 0x79D20}, {0, 0x79D40},
        {0, 0x79D60}, {0, 0x79D80}, {0, 0x79DA0}, {0, 0x79DC0}, {0, 0x79DE0}, {0, 0x79E00},
        {0, 0x79E20}, {0, 0x79E40}, {0, 0x79E60}, {0, 0x79E80}, {0, 0x79EA0}, {0, 0x79EC0},
        {0, 0x79EE0}, {0, 0x79F00}, {0, 0x79F20}, {0, 0x79F40}, {0, 0x79F60}, {0, 0x79F80},
        {0, 0x79FA0}, {0, 0x79FC0},
    };

    if (x < 1) {
        x = 1;
    }
    if (x > 2047) {
        x = 2047;
    }
    return LOG_VALUE_TABLE[x];
}
